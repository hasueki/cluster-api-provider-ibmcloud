// Code generated by MockGen. DO NOT EDIT.
// Source: ../client.go

// Package mock_client is a generated GoMock package.
package mock_client

import (
	reflect "reflect"

	vpcv1 "github.com/IBM/vpc-go-sdk/vpcv1"
	gomock "github.com/golang/mock/gomock"
	v1beta1 "github.com/openshift/cluster-api-provider-ibmcloud/pkg/apis/ibmcloudprovider/v1beta1"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// GetCustomImageByName mocks base method.
func (m *MockClient) GetCustomImageByName(imageName, resourceGroupID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomImageByName", imageName, resourceGroupID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomImageByName indicates an expected call of GetCustomImageByName.
func (mr *MockClientMockRecorder) GetCustomImageByName(imageName, resourceGroupID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomImageByName", reflect.TypeOf((*MockClient)(nil).GetCustomImageByName), imageName, resourceGroupID)
}

// GetDedicatedHostByName mocks base method.
func (m *MockClient) GetDedicatedHostByName(dedicatedHostName, resourceGroupID, zoneName string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDedicatedHostByName", dedicatedHostName, resourceGroupID, zoneName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDedicatedHostByName indicates an expected call of GetDedicatedHostByName.
func (mr *MockClientMockRecorder) GetDedicatedHostByName(dedicatedHostName, resourceGroupID, zoneName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDedicatedHostByName", reflect.TypeOf((*MockClient)(nil).GetDedicatedHostByName), dedicatedHostName, resourceGroupID, zoneName)
}

// GetResourceGroupIDByName mocks base method.
func (m *MockClient) GetResourceGroupIDByName(resourceGroupName string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourceGroupIDByName", resourceGroupName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResourceGroupIDByName indicates an expected call of GetResourceGroupIDByName.
func (mr *MockClientMockRecorder) GetResourceGroupIDByName(resourceGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourceGroupIDByName", reflect.TypeOf((*MockClient)(nil).GetResourceGroupIDByName), resourceGroupName)
}

// GetSecurityGroupsByName mocks base method.
func (m *MockClient) GetSecurityGroupsByName(securityGroupNames []string, resourceGroupID, vpcID string) ([]vpcv1.SecurityGroupIdentityIntf, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecurityGroupsByName", securityGroupNames, resourceGroupID, vpcID)
	ret0, _ := ret[0].([]vpcv1.SecurityGroupIdentityIntf)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecurityGroupsByName indicates an expected call of GetSecurityGroupsByName.
func (mr *MockClientMockRecorder) GetSecurityGroupsByName(securityGroupNames, resourceGroupID, vpcID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecurityGroupsByName", reflect.TypeOf((*MockClient)(nil).GetSecurityGroupsByName), securityGroupNames, resourceGroupID, vpcID)
}

// GetSubnetIDbyName mocks base method.
func (m *MockClient) GetSubnetIDbyName(subnetName, resourceGroupID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubnetIDbyName", subnetName, resourceGroupID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubnetIDbyName indicates an expected call of GetSubnetIDbyName.
func (mr *MockClientMockRecorder) GetSubnetIDbyName(subnetName, resourceGroupID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubnetIDbyName", reflect.TypeOf((*MockClient)(nil).GetSubnetIDbyName), subnetName, resourceGroupID)
}

// GetVPCIDByName mocks base method.
func (m *MockClient) GetVPCIDByName(vpcName, resourceGroupID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVPCIDByName", vpcName, resourceGroupID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVPCIDByName indicates an expected call of GetVPCIDByName.
func (mr *MockClientMockRecorder) GetVPCIDByName(vpcName, resourceGroupID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVPCIDByName", reflect.TypeOf((*MockClient)(nil).GetVPCIDByName), vpcName, resourceGroupID)
}

// InstanceCreate mocks base method.
func (m *MockClient) InstanceCreate(machineName string, machineProviderConfig *v1beta1.IBMCloudMachineProviderSpec, userData string) (*vpcv1.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstanceCreate", machineName, machineProviderConfig, userData)
	ret0, _ := ret[0].(*vpcv1.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InstanceCreate indicates an expected call of InstanceCreate.
func (mr *MockClientMockRecorder) InstanceCreate(machineName, machineProviderConfig, userData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstanceCreate", reflect.TypeOf((*MockClient)(nil).InstanceCreate), machineName, machineProviderConfig, userData)
}

// InstanceDeleteByName mocks base method.
func (m *MockClient) InstanceDeleteByName(name string, machineProviderConfig *v1beta1.IBMCloudMachineProviderSpec) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstanceDeleteByName", name, machineProviderConfig)
	ret0, _ := ret[0].(error)
	return ret0
}

// InstanceDeleteByName indicates an expected call of InstanceDeleteByName.
func (mr *MockClientMockRecorder) InstanceDeleteByName(name, machineProviderConfig interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstanceDeleteByName", reflect.TypeOf((*MockClient)(nil).InstanceDeleteByName), name, machineProviderConfig)
}

// InstanceExistsByName mocks base method.
func (m *MockClient) InstanceExistsByName(name string, machineProviderConfig *v1beta1.IBMCloudMachineProviderSpec) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstanceExistsByName", name, machineProviderConfig)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InstanceExistsByName indicates an expected call of InstanceExistsByName.
func (mr *MockClientMockRecorder) InstanceExistsByName(name, machineProviderConfig interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstanceExistsByName", reflect.TypeOf((*MockClient)(nil).InstanceExistsByName), name, machineProviderConfig)
}

// InstanceGetByID mocks base method.
func (m *MockClient) InstanceGetByID(instanceID string) (*vpcv1.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstanceGetByID", instanceID)
	ret0, _ := ret[0].(*vpcv1.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InstanceGetByID indicates an expected call of InstanceGetByID.
func (mr *MockClientMockRecorder) InstanceGetByID(instanceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstanceGetByID", reflect.TypeOf((*MockClient)(nil).InstanceGetByID), instanceID)
}

// InstanceGetByName mocks base method.
func (m *MockClient) InstanceGetByName(name string, machineProviderConfig *v1beta1.IBMCloudMachineProviderSpec) (*vpcv1.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstanceGetByName", name, machineProviderConfig)
	ret0, _ := ret[0].(*vpcv1.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InstanceGetByName indicates an expected call of InstanceGetByName.
func (mr *MockClientMockRecorder) InstanceGetByName(name, machineProviderConfig interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstanceGetByName", reflect.TypeOf((*MockClient)(nil).InstanceGetByName), name, machineProviderConfig)
}

// InstanceGetProfile mocks base method.
func (m *MockClient) InstanceGetProfile(profileName string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstanceGetProfile", profileName)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InstanceGetProfile indicates an expected call of InstanceGetProfile.
func (mr *MockClientMockRecorder) InstanceGetProfile(profileName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstanceGetProfile", reflect.TypeOf((*MockClient)(nil).InstanceGetProfile), profileName)
}
